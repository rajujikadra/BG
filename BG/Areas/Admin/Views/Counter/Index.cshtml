@model BG.Models.CounterViewModel
@{
    ViewBag.Title = "Counter";
    Layout = "~/Areas/Admin/Views/Shared/AdminLayout.cshtml";
}
<div class="main-content" style="min-height: 260px;">
    <section class="section">
        <div class="section-body">
            <div class="row">
                <div class="col-12 col-md-12 col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <h4>Counter</h4>
                        </div>
                        @using (Ajax.BeginForm("AddCounters", "Counter", null, new AjaxOptions { HttpMethod = "POST", OnSuccess = "RegisterFormSuccess", OnFailure = "Failed", }, new { @id = "formCounter", @class = "needs-validation", @autocomplete = "off" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="row p-3">
                                <div class="col-lg-6 col-md-6 col-sm-12 mt-4">
                                    <div class="">
                                        <div class="">
                                            <div class="form-group">
                                                <label>Email</label>
                                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                            </div><div class="form-group">
                                                <label>Password</label>
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                            </div><div class="form-group">
                                                <label>Conform Password</label>
                                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                                            </div><div class="form-group">
                                                <label>First Name</label>
                                                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                                            </div><div class="form-group">
                                                <label>Last Name</label>
                                                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                                            </div><div class="form-group">
                                                <label>Address</label>
                                                <input type="text" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-12 mt-4">
                                    <div class="">
                                        <div class="">
                                            <div class="form-group">
                                                <label>Mobile No</label>
                                                @Html.TextBoxFor(m => m.MobileNo, new { @class = "form-control", @maxlength = "10", @onkeypress = "return isNumberKey(event)" })
                                                @Html.ValidationMessageFor(m => m.MobileNo, "", new { @class = "text-danger" })
                                            </div><div class="form-group">
                                                <label>Refrence Name</label>
                                                @Html.TextBoxFor(m => m.RefName, new { @class = "form-control" })
                                            </div><div class="form-group">
                                                <label>Refrence Mobile</label>
                                                @Html.TextBoxFor(m => m.RefMobile, new { @class = "form-control", @maxlength = "10", @onkeypress = "return isNumberKey(event)" })
                                            </div><div class="form-group">
                                                <label>Refrence business</label>
                                                @Html.TextBoxFor(m => m.RefBusiness, new { @class = "form-control" })
                                            </div><div class="form-group">
                                                <label>Role</label>
                                                @Html.DropDownListFor(m => m.Role, new SelectList(ViewBag.RoleList, "Value", "Text"), "--Select role--", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group">
                                                <div class="row">
                                                    <div class="col-lg-4">
                                                        <label>Country</label>
                                                        @*<input type="text" class="form-control">*@
                                                        @Html.DropDownListFor(m => m.UserCountryId, new SelectList(ViewBag.Country, "CountryId", "CountryName"), "--Select country--", new { @class = "form-control", @onchange = "SelectCountry(this, 'UserCountry');" })
                                                    </div>
                                                    <div class="col-lg-4">
                                                        <label>State</label>
                                                        @*<input type="text" class="form-control">*@
                                                        @Html.DropDownListFor(m => m.UserStateId, new SelectList(ViewBag.State, "Value", "Text"), "--Select state--", new { @class = "form-control", @disabled = "disabled", @onchange = "SelectState(this, 'UserState');" })
                                                    </div>
                                                    <div class="col-lg-4">
                                                        <label>City</label>
                                                        @*<input type="text" class="form-control">*@
                                                        @Html.DropDownListFor(m => m.UserCityId, new SelectList(ViewBag.City, "Value", "Text"), "--Select city--", new { @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-12 my-1 text-right">
                                            <button class="btn btn-primary mr-1" type="button" data-toggle="modal" data-target="#ModalMenu" data-backdrop="static" @*onclick="GetMenuPermission();"*@>Menu Rights</button>
                                            <button class="btn btn-primary mr-1" type="button" data-toggle="modal" data-target="#ModalColumn" data-backdrop="static" @*onclick="GetColumnPermission();"*@>Stock Rights</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row p-3">
                                <div class="col-lg-12">
                                    <div class="card-footer text-right mt-3">
                                        <button class="btn btn-primary mr-1" type="button" id="btnRegister">Submit</button>
                                        <button class="btn btn-danger" type="reset">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<div class="modal fade" id="ModalMenu" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Menu permission</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12 col-md-12 col-lg-12">
                        <div class="row">
                            @foreach (var C in ViewBag.Menus)
                            {
                                <div class="col-6 btn btn-icon align-left">
                                    <div class="custom-checkbox custom-checkbox-table custom-control font-15">
                                        <input type="checkbox" @(C.IsDisplay ? "checked" : "") value="@C.MenuName" data-checkboxes="mygroup" data-checkbox-role="dad" class="custom-control-input menu-chk" id="@C.MenuName.Replace(" ", "")">
                                        <label for="@C.MenuName.Replace(" ", "")" class="custom-control-label">@C.MenuName</label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-whitesmoke br">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ModalColumn" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Column permission</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12 col-md-12 col-lg-12">
                        <div class="row">
                            @foreach (var C in ViewBag.Columns)
                            {
                                <div class="col-lg-4 btn btn-icon align-left Columnpermission_modal">
                                    <div class="custom-checkbox custom-checkbox-table custom-control font-15">
                                        <input type="checkbox" @(C.IsDisplay ? "checked" : "") value="@C.ColumnId" data-checkboxes="mygroup" data-checkbox-role="dad" class="custom-control-input column-chk" id="@C.ColumnId">
                                        <label for="@C.ColumnId" class="custom-control-label">@C.ColumnName</label>
                                        <input maxlength="2" type="text" id="txt_@C.ColumnId" onkeypress="return isNumberKey(event)" name="" value="@C.Sort" class="form-control custom-txtBox sort-txt" @(C.IsDisplay ? "" : "disabled") />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-whitesmoke br">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>

</div>
@section scripts{
    <script type="text/javascript">
        var Menus = [];
        var Columns = [];
         $(".column-chk").on('click', function (e) {
             var $this = $(this);
             if ($this.is(':checked')) {
                 $("#txt_" + $this[0].id).removeAttr("disabled");
             } else {
                 $("#txt_" + $this[0].id).attr("disabled", "disabled");
                 $("#txt_" + $this[0].id).val("");
             }
         });
         $(".sort-txt").on('change', function (e) {
             var ID = this.id;
             $('.sort-txt').each(function () {
                 var $this = $(this);
                 if (ID != $this[0].id) {
                     if ($this.val().trim() == $("#" + ID).val()) {
                         iziToast.error({
                            title: "You can't enter column same position - " + $("#" + ID).val() + ".",
                            message: "",
                            position: 'topRight'
                         });
                         $("#" + ID).val("");
                          return false;
                      }
                 }
             });
        });
        $("#btnRegister").on('click', function () {
            $('.menu-chk').each(function () {
               var $this = $(this);
               if ($this.is(':checked')) {
                   Menus.push($this.val());
               }
            });
            $('.column-chk').each(function () {
               var $this = $(this);
                if ($this.is(':checked')) {
                   var obj = {
                     'ColumnId': parseInt($this.val()),
                     'Sort': parseInt($("#txt_" + $this[0].id).val())
                   };
                   Columns.push(obj);
               }
            });
            var form = $('#formCounter');
            if (formValidate(form) === false) {
                return false;
            }
            if (Menus.length == 0) {
                swal({
                    title: "Warning",
                    text: "Please set menu permission.",
                    icon: "warning"
                });
                return;
            }
            if (Columns.length == 0) {
                swal({
                    title: "Warning",
                    text: "Please set columns permission.",
                    icon: "warning"
                });
                return;
            }

            var formData = objectifyForm(form.serializeArray());
            formData.MenuNames = JSON.stringify(Menus);
            formData.ColumnName = JSON.stringify(Columns);
            HoldOn.open();
            $.ajax({
                url: "/Account/CheckEmailAlreadyThere",
                method: "GET",
                data: { 'Email': $("#Email").val().trim() },
                contentType: 'application/json',
                success: function (data) {
                    if (data == true) {
                        swal({
                            title: "Warning",
                            text: $("#Email").val().trim() + " already taken. Please enter different email.",
                            icon: "warning"
                        })
                        return;
                    } else {
                        $.ajax({
                            url: "/Admin/Counter/Register",
                            method: "POST",
                            data: JSON.stringify(formData),
                            contentType: 'application/json',
                            success: function (data) {
                                if (data.StatusCode == 200) {
                                    swal({
                                        title: "Success",
                                        text: "Your account has been successfully register.",
                                        icon: "success"
                                    }).then(function (willDelete) {
                                        if (willDelete) {
                                            location.reload();
                                        }
                                    });
                                } else if (data.StatusCode == 404) {
                                    swal("Error", "Opps! Some problem there", "error");
                                }
                                HoldOn.close();
                            },
                            error: function (data) {
                                HoldOn.close();
                            }
                        });
                    }
                },
                error: function (data) {
                    HoldOn.close();
                }
            });
        });
        function objectifyForm(formArray) {
            var returnArray = {};
            for (var i = 0; i < formArray.length; i++) {
                returnArray[formArray[i]['name']] = formArray[i]['value'];
            }
            return returnArray;
        }
        function formValidate(form) {
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
            if (!form.valid())
                return false;
            else
                return true;
        }
        function SelectCountry(e, DrdName) {
            $.ajax({
                url: "/Counter/GetStates",
                method: "GET",
                data: { 'CountryId': e.value },
                contentType: 'application/json',
                beforeSend: function () {
                    HoldOn.open();
                },
                complete: function () {
                    HoldOn.close();
                },
                success: function (data) {
                    if (data.length > 0) {
                        if (DrdName == "UserCountry") {
                            $("#UserStateId").empty();
                            $("#UserStateId").append($("<option>--Select State--</option>"))
                            $("#UserCityId").empty();
                            $("#UserCityId").append($("<option>--Select City--</option>"))
                            $.each(data, function (index, value) {
                                $("#UserStateId").append($("<option></option>").val(this.StateId).html(this.StateName));
                            });
                            $("#UserStateId").removeAttr("disabled");
                        } else if (DrdName == "CompanyCountry") {
                            $("#BusinessStateId").empty();
                            $("#BusinessStateId").append($("<option>--Select State--</option>"))
                            $("#BusinessCityId").empty();
                            $("#BusinessCityId").append($("<option>--Select City--</option>"))
                            $.each(data, function (index, value) {
                                $("#BusinessStateId").append($("<option></option>").val(this.StateId).html(this.StateName));
                            });
                            $("#BusinessStateId").removeAttr("disabled");
                        }
                    }
                },
                error: function (data) {
                    $('.loader').hide();
                    $("#btnclose").click();
                }
            });
        }
        function SelectState(e, DrdName) {
            $.ajax({
                url: "/Counter/GetCity",
                method: "GET",
                data: { 'StateId': e.value },
                contentType: 'application/json',
                beforeSend: function () {
                    HoldOn.open();
                },
                complete: function () {
                    HoldOn.close();
                },
                success: function (data) {
                    if (data.length > 0) {
                        if (DrdName == "UserState") {
                            $("#UserCityId").empty();
                            $("#UserCityId").append($("<option>--Select City--</option>"))
                            $.each(data, function (index, value) {
                                $("#UserCityId").append($("<option></option>").val(this.CityId).html(this.CityName));
                            });
                            $("#UserCityId").removeAttr("disabled");
                        } else if (DrdName == "CompanyState") {
                            $("#BusinessCityId").empty();
                            $("#BusinessCityId").append($("<option>--Select City--</option>"))
                            $.each(data, function (index, value) {
                                $("#BusinessCityId").append($("<option></option>").val(this.CityId).html(this.CityName));
                            });
                            $("#BusinessCityId").removeAttr("disabled");
                        }
                    }
                },
                error: function (data) {
                    $('.loader').hide();
                    $("#btnclose").click();
                }
            });
        }
        function isNumberKey(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }

        function GetMenuPermission() {
              $.ajax({
                 async: true,
                 type: "Get",
                 url: '@Url.Action("GetMenuPermission","Counter", new { area = "admin"} )',
                 beforeSend: function () {
                     HoldOn.open();
                 },
                 complete: function () {
                    HoldOn.close();
                 },
                 success: function (response) {
                     $("#ModalCenter").empty();
                     $("#ModalCenter").html(response);
                      $('#ModalCenter').modal({
                         backdrop: 'static',
                         keyboard: false
                     });
                 },
                 error: function (response) {
                     alert(response.responseText);
                 }
              });
        }
        function GetColumnPermission() {
            $.ajax({
                 async: true,
                 type: "Get",
                 url: '@Url.Action("GetBrokerColumn","Counter", new { area = "admin"} )',
                 beforeSend: function () {
                     HoldOn.open();
                 },
                 complete: function () {
                    HoldOn.close();
                 },
                 success: function (response) {
                     $("#ModalCenter").empty();
                     $("#ModalCenter").html(response);
                      $('#ModalCenter').modal({
                         backdrop: 'static',
                         keyboard: false
                     });
                 },
                 error: function (response) {
                     alert(response.responseText);
                 }
              });
        }
    </script>
}
