@model List<BG_Application.CustomDTO.BrokerColumnsViewModel>
<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="exampleModalCenterTitle">@ViewBag.BrokerName's permission</h5>
            <input type="hidden" id="BrokerID" value="@ViewBag.BrokerID" />
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="col-12 col-md-12 col-lg-12">
                    <div class="row">
                        @foreach (var C in Model)
                        {
                            <div class="col-md-4 btn btn-icon align-left Columnpermission_modal">
                                <div class="custom-checkbox custom-checkbox-table custom-control font-15">
                                    <input type="checkbox" @(C.IsDisplay ? "checked" : "") value="@C.ColumnId" data-checkboxes="mygroup" data-checkbox-role="dad" class="custom-control-input brk-chk" id="@C.ColumnId">
                                    <label for="@C.ColumnId" class="custom-control-label">@C.ColumnName</label>
                                    <input maxlength="2" type="text" id="txt_@C.ColumnId" onkeypress="return isNumberKey(event)" name="" value="@C.Sort" class="form-control custom-txtBox sort-txt" @(C.IsDisplay ? "" : "disabled") />
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer bg-whitesmoke br">
            <button type="button" class="btn btn-primary" onclick="SaveBrokerPermission();">Save</button>
            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(".brk-chk").on('click', function (e) {
        var $this = $(this);
        if ($this.is(':checked')) {
            $("#txt_" + $this[0].id).removeAttr("disabled");
        } else {
            $("#txt_" + $this[0].id).attr("disabled", "disabled");
            $("#txt_" + $this[0].id).val("");
        }
    });
    $(".sort-txt").on('change', function (e) {
        var ID = this.id;
        $('.sort-txt').each(function () {
            var $this = $(this);
            if (ID != $this[0].id) {
                if ($this.val().trim() == $("#" + ID).val()) {
                    iziToast.error({
                       title: "You can't enter column same position - " + $("#" + ID).val() + ".",
                       message: "",
                       position: 'topRight'
                    });
                    $("#" + ID).val("");
                     return false;
                 }
            }
        });
    });
    function SaveBrokerPermission() {
        var BrokerIDs = [];
        $('.brk-chk').each(function () {
            var $this = $(this);
            if ($this.is(':checked')) {
                var obj = {
                    'ColumnId': parseInt($this.val()),
                    'Sort': parseInt($("#txt_" + $this[0].id).val())
                };
                BrokerIDs.push(obj);
            }
        });
        $.ajax({
            async: false,
            type: "POST",
            url: '@Url.Action("SetPerimission","broker", new { area = "admin"} )',
            cache: false,
            data: { 'UserID': $("#BrokerID").val(), 'BrokerColumn': BrokerIDs },
            beforeSend: function () {
                  HoldOn.open();
             },
            complete: function () {
                   HoldOn.close();
            },
            success: function (response) {
                if (response == true) {
                    $("#ModalCenter").modal('hide');
                    swal("Success", "@ViewBag.BrokerName's permission has been set.", "success");
                }
            },
            error: function (response) {
                  alert(response.responseText);
            }
        });
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }
</script>